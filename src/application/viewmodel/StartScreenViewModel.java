package application.viewmodel;

import application.model.IllegalTypeException;
import application.model.Player;
import application.model.PlayerController;
import application.model.PlayerType;
import application.model.UI;
import javafx.beans.property.BooleanProperty;
import javafx.beans.property.SimpleBooleanProperty;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;

/**
 * View Model class for the Start Screen controller.
 * 
 * @author Thomas Whaley
 * @version 1.0
 *
 */
public class StartScreenViewModel {

	private StringProperty playerOneNameProperty;
	private StringProperty playerTwoNameProperty;
	private StringProperty errorProperty;
	private BooleanProperty playerOneXProperty;
	private BooleanProperty playerOneOProperty;
	private BooleanProperty playerTwoXProperty;
	private BooleanProperty playerTwoOProperty;
	
	/**
	 * Creates a new StartScreenViewModel object.
	 * 
	 * @precondition: none
	 * @postcondition: none
	 */
	public StartScreenViewModel() {
		this.playerOneNameProperty = new SimpleStringProperty();
		this.playerTwoNameProperty = new SimpleStringProperty();
		this.errorProperty = new SimpleStringProperty();
		this.playerOneXProperty = new SimpleBooleanProperty();
		this.playerOneOProperty = new SimpleBooleanProperty();
		this.playerTwoXProperty = new SimpleBooleanProperty();
		this.playerTwoOProperty = new SimpleBooleanProperty();
	}
	
	/**
	 * Gets the error property.
	 * 
	 * @precondition: none
	 * @postcondition: none
	 * 
	 * @return error property
	 */
	public StringProperty errorProperty() {
		return this.errorProperty;
	}
	
	/**
	 * Gets player one's name property.
	 * 
	 * @precondition: none
	 * @postcondition: none
	 * 
	 * @return player one's name property
	 */
	public StringProperty playerOneNameProperty() {
		return this.playerOneNameProperty;
	}
	
	/**
	 * Gets player two's name property.
	 * 
	 * @precondition: none
	 * @postcondition: none
	 * 
	 * @return player two's name property
	 */
	public StringProperty playerTwoNameProperty() {
		return this.playerTwoNameProperty;
	}
	
	/**
	 * Gets player one's x property
	 * 
	 * @precondition: none
	 * @postcondition: none
	 * 
	 * @return player one's x property
	 */
	public BooleanProperty playerOneXProperty() {
		return this.playerOneXProperty;
	}
	
	/**
	 * Gets player one's o property
	 * 
	 * @precondition: none
	 * @postcondition: none
	 * 
	 * @return player one's o property
	 */
	public BooleanProperty playerOneOProperty() {
		return this.playerOneOProperty;
	}
	
	/**
	 * Gets player two's x property
	 * 
	 * @precondition: none
	 * @postcondition: none
	 * 
	 * @return player two's x property
	 */
	public BooleanProperty playerTwoXProperty() {
		return this.playerTwoXProperty;
	}
	
	/**
	 * Gets player two's o property
	 * 
	 * @precondition: none
	 * @postcondition: none
	 * 
	 * @return player two's o property
	 */
	public BooleanProperty playerTwoOProperty() {
		return this.playerTwoOProperty;
	}
	
	/**
	 * Called when the user hits the start button on the Start Screen Pane
	 * 
	 * @precondition: none
	 * @postcondition: none
	 * 
	 * @return the PlayerController that is generated by pressing the start button
	 * 			OR null if a PlayerController could not be generated
	 */
	public PlayerController startButton() {
		if (this.validateFields()) {
			PlayerController players = new PlayerController();
			
			String playerOneName = this.playerOneNameProperty.get();
			PlayerType playerOneType = PlayerType.isX(this.playerOneXProperty.get());
			players.add(new Player(playerOneName, playerOneType));
			
			String playerTwoName = this.playerTwoNameProperty.get();
			PlayerType playerTwoType = PlayerType.isX(this.playerTwoXProperty.get());
			try {
				players.add(new Player(playerTwoName, playerTwoType));
				
				return players;
			} catch (IllegalTypeException e) {
				this.errorProperty.set(e.getMessage());
			}
		}
		
		return null;
	}
	
	/**
	 * Clears all fields to empty strings and false boolean expressions.
	 * 
	 * @precondition: none
	 * @postcondition: none
	 */
	public void clearFields() {
		this.playerOneNameProperty.set("");
		this.playerTwoNameProperty.set("");
		this.playerOneXProperty.set(false);
		this.playerOneOProperty.set(false);
		this.playerTwoXProperty.set(false);
		this.playerTwoOProperty.set(false);
		this.errorProperty.set("");
	}
	
	/**
	 * Clears the error property label
	 * 
	 * @precondition: none
	 * @postcondition: none
	 */
	public void clearError() {
		this.errorProperty.set("");
	}
	
	/**
	 * Validates if the fields are appropriate for the start 
	 * button code to be accessed.
	 * 
	 * @precondition: none
	 * @postcondition: none
	 * 
	 * @return true if passes validation
	 * 			false if fails validation
	 */
	private boolean validateFields() {
		boolean oneX = this.playerOneXProperty.get();
		boolean oneO = this.playerOneOProperty.get();
		boolean twoX = this.playerTwoXProperty.get();
		boolean twoO = this.playerTwoOProperty.get();
		
		if (this.playerOneNameProperty.get() == null) {
			this.errorProperty.set(UI.FieldWarnings.PLAYER_ONE_NAME);
			return false;
		}
		if (this.playerOneNameProperty.get().isEmpty()) {
			this.errorProperty.set(UI.FieldWarnings.PLAYER_ONE_NAME);
			return false;
		}
		if (this.playerTwoNameProperty.get() == null) {
			this.errorProperty.set(UI.FieldWarnings.PLAYER_TWO_NAME);
			return false;
		}
		if (this.playerTwoNameProperty.get().isEmpty()) {
			this.errorProperty.set(UI.FieldWarnings.PLAYER_TWO_NAME);
			return false;
		}
		if (oneX && oneO) {
			this.errorProperty.set(UI.FieldWarnings.PLAYER_ONE_XO_SAME_TIME);
			return false;
		}
		if (twoX && twoO) {
			this.errorProperty.set(UI.FieldWarnings.PLAYER_TWO_XO_SAME_TIME);
			return false;
		}
		if (!oneX && !oneO) {
			this.errorProperty.set(UI.FieldWarnings.PLAYER_ONE_MUST_HAVE_TYPE);
			return false;
		}
		if (!twoX && !twoO) {
			this.errorProperty.set(UI.FieldWarnings.PLAYER_TWO_MUST_HAVE_TYPE);
			return false;
		}
		
		this.clearError();
		return true;
	}
}
